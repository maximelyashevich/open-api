openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /v1/questions/{id}:
    get:
      tags:
      - question-controller
      operationId: findById_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
      - question-controller
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
      - question-controller
      operationId: delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /v1/emotions/{id}:
    get:
      tags:
      - emotion-controller
      operationId: findById_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
      - emotion-controller
      operationId: update_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmotionRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
      - emotion-controller
      operationId: delete_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /v1/results:
    post:
      tags:
      - quiz-result-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EmotionDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  /v1/questions:
    get:
      tags:
      - question-controller
      operationId: findAll_1
      parameters:
      - name: text
        in: query
        required: false
        schema:
          type: string
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
      - question-controller
      operationId: add
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /v1/emotions:
    get:
      tags:
      - emotion-controller
      operationId: findAll_2
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
      - emotion-controller
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmotionRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /v1/quizzes:
    get:
      tags:
      - quiz-controller
      operationId: findAll
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quiz'
  /v1/quizzes/{id}:
    get:
      tags:
      - quiz-controller
      operationId: findById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
components:
  schemas:
    Emotion:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        result:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/QuizResultEmotion'
    QuestionRequestDto:
      type: object
      properties:
        text:
          type: string
        emotion:
          $ref: '#/components/schemas/Emotion'
    QuizResult:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        result:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/QuizResultEmotion'
    QuizResultEmotion:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/QuizResultEmotionKey'
        quizResult:
          $ref: '#/components/schemas/QuizResult'
        emotion:
          $ref: '#/components/schemas/Emotion'
        value:
          type: integer
          format: int32
    QuizResultEmotionKey:
      type: object
      properties:
        quizResultId:
          type: integer
          format: int64
        emotionId:
          type: integer
          format: int64
    User:
      type: object
    EmotionRequestDto:
      type: object
      properties:
        description:
          type: string
    EmotionDto:
      type: object
      properties:
        emotionId:
          type: integer
          format: int64
        value:
          type: integer
          format: int32
    Question:
      required:
      - text
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        emotion:
          $ref: '#/components/schemas/Emotion'
    Quiz:
      required:
      - description
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        createDate:
          type: string
          format: date-time
        questions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Question'
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
